#!/usr/bin/env php
<?php
if ($argc < 2) {
    echo "Usage: gen/controller RESOURCE_NAME\n";
    exit(1);
}
$basePath = getcwd();

$controller = ucfirst($argv[1]);
$appName = basename($basePath);

$controllerPath = "$basePath/Controller/$controller.hs";
if (file_exists($controllerPath)) {
    echo "Controller already exists: $controllerPath\n";
    exit(1);
}
$model = substr($controller, 0,-1);
$modelVariable = lcfirst($controller);
$singularModelVariable = substr(lcfirst($controller), 0, -1);
$viewBaseModule = "View." . ucfirst($modelVariable) . ".";
$pathGenerator = $singularModelVariable . "Path";
$pluralPathGenerator = $modelVariable . "Path";

$idType = $model . "Id";

ob_start();
?>
module Apps.<?= $appName; ?>.Controller.<?= $controller ?> where

import Foundation.ControllerPrelude
import qualified Model.<?= $model ?> as <?= $model ?>


index :: Action
index = do
    <?= $modelVariable ?> <- query @<?= $model ?> |> fetch
    renderHtml $ Index.render <?= $modelVariable ?>


new :: Action
new = do
    let <?= $singularModelVariable ?> = <?= $model?>.build
    renderHtml $ New.render <?= $singularModelVariable ?>


show :: <?= $idType ?> -> Action
show id = do
    <?= $singularModelVariable ?> <- query @<?= $model ?> |> findById id
    renderHtml $ Show.render <?= $singularModelVariable ?>


edit :: <?= $idType ?> -> Action
edit id = do
    <?= $singularModelVariable ?> <- query @<?= $model ?> |> findById id
    renderHtml $ Edit.render <?= $singularModelVariable ?>


update :: <?= $idType ?> -> Action
update id = do
    <?= $singularModelVariable ?>' <- query @<?= $model ?> |> findById id
    let <?= $singularModelVariable ?> :: <?= $model ?> = <?= $model?>.readParams (<?= $model?>.const <?= $singularModelVariable ?>') {
            title = param,
            body = param
        }
    isValid <- validateRecord2 <?= $singularModelVariable ?>

    case isValid of
        Left errors -> renderHtml $ Edit.render <?= $singularModelVariable ?>

        Right <?= $singularModelVariable ?> -> do
            <?= $singularModelVariable ?> <- updateRecord <?= $singularModelVariable ?>

            setSuccessMessage "<?= $model ?> updated"
            redirectTo (edit<?= ucfirst($pathGenerator) ?> <?= $singularModelVariable ?>)


create :: Action
create = do
    let <?= $singularModelVariable ?> :: New<?= $model ?> = <?= $model?>.readParams <?= $model?>.buildConst {
            title = param,
            body = param
        }
    isValid <- validateRecord2 <?= $singularModelVariable ?>

    case isValid of
        Left errors -> renderHtml $ New.render <?= $singularModelVariable ?>

        Right <?= $singularModelVariable ?> -> do
            <?= $singularModelVariable ?> <- createRecord <?= $singularModelVariable ?>

            setSuccessMessage "<?= $model ?> created successfully"
            redirectTo (<?= $pathGenerator ?> <?= $singularModelVariable ?>)


delete :: <?= $idType ?> -> Action
delete id = do
    <?= $singularModelVariable ?> <- query @<?= $model ?> |> findById id
    deleteRecord <?= $singularModelVariable ?>

    setSuccessMessage "Deleted <?= $model ?> successfully"
    redirectTo <?= $pluralPathGenerator ?>

<?php
$body = ob_get_clean();
ob_start();
$marker = '        -- Generator Marker';
?>
        , toRoutes $ resource {
            baseUrl = "<?= $controller ?>",
            index = <?= $controller ?>.index,
            new = <?= $controller ?>.new,
            show = <?= $controller ?>.show,
            edit = <?= $controller ?>.edit,
            update = <?= $controller ?>.update,
            create = <?= $controller ?>.create,
            destroy = <?= $controller ?>.delete
        }
<?= $marker ?>
<?php
$routes = ob_get_clean();

file_put_contents($controllerPath, $body);
echo "+ $controllerPath\n";

// Add url generator stubs
$urlGenerators = file_get_contents("$basePath/../../UrlGenerator.hs");
$urlGenerators .= "\n" . lcfirst($model) . "Path a = \"\" :: Text\n" . lcfirst($model) . "sPath = \"\" :: Text\nedit${model}Path a = \"\" :: Text\nnew${model}Path = \"\" :: Text";
file_put_contents("$basePath/../../UrlGenerator.hs", $urlGenerators);


$actions = ['index', 'new', 'show', 'edit'];
foreach ($actions as $action) {
    system("gen/view $controller $action");
}

$routesHs = file_get_contents("$basePath/Routes.hs");
$routesHs = str_replace($marker, $routes, $routesHs);
$routesHs = str_replace("-- Controller Imports\n", "-- Controller Imports\nimport qualified Apps.$appName.Controller.$controller as $controller\n", $routesHs);
file_put_contents("$basePath/Routes.hs", $routesHs);
