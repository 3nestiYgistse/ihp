.PHONY: run

GHC_EXTENSIONS=
GHC_EXTENSIONS+= -XOverloadedStrings
GHC_EXTENSIONS+= -XNoImplicitPrelude
GHC_EXTENSIONS+= -XImplicitParams
GHC_EXTENSIONS+= -XRank2Types
GHC_EXTENSIONS+= -XDisambiguateRecordFields
GHC_EXTENSIONS+= -XNamedFieldPuns
GHC_EXTENSIONS+= -XDuplicateRecordFields
GHC_EXTENSIONS+= -XOverloadedLabels
GHC_EXTENSIONS+= -XFlexibleContexts
GHC_EXTENSIONS+= -XTypeSynonymInstances
GHC_EXTENSIONS+= -XFlexibleInstances
GHC_EXTENSIONS+= -XQuasiQuotes
GHC_EXTENSIONS+= -XTypeFamilies
GHC_EXTENSIONS+= -XPackageImports
GHC_EXTENSIONS+= -XScopedTypeVariables
GHC_EXTENSIONS+= -XRecordWildCards
GHC_EXTENSIONS+= -XTypeApplications
GHC_EXTENSIONS+= -XDataKinds
GHC_OPTIONS+= -XInstanceSigs
GHC_EXTENSIONS+= -XDeriveGeneric
GHC_EXTENSIONS+= -XMultiParamTypeClasses
GHC_EXTENSIONS+= -XTypeOperators
GHC_EXTENSIONS+= -XDeriveDataTypeable
GHC_EXTENSIONS+= -XMultiWayIf

GHC_OPTIONS=-threaded -i. -ibuild
GHC_OPTIONS+= ${GHC_EXTENSIONS}
GHC_OPTIONS+= -j2
GHC_OPTIONS+= +RTS -A256m -n2m --RTS

PROD_GHC_OPTIONS+= -funfolding-use-threshold=16
PROD_GHC_OPTIONS+= -optc-O3
PROD_GHC_OPTIONS+= -funbox-strict-fields
PROD_GHC_OPTIONS+= -fconstraint-solver-iterations=100
PROD_GHC_OPTIONS+= -fexpose-all-unfoldings
PROD_GHC_OPTIONS+= -flate-dmd-anal
PROD_GHC_OPTIONS+= -fspec-constr-keen
PROD_GHC_OPTIONS+= -fspecialise-aggressively
PROD_GHC_OPTIONS+= -fstatic-argument-transformation
PROD_GHC_OPTIONS+= -fmax-worker-args=200
PROD_GHC_OPTIONS+= -with-rtsopts="-A512m -n4m"



RUNGHC=runghc

run: .envrc build/db/state build/Generated static/prod.js static/prod.css
	RunDevServer


.envrc: default.nix TurboHaskell/NixSupport/default.nix
	rm -f .envrc
	echo "PATH_add $$(nix-shell --run 'echo $$PATH')" > .envrc
	direnv allow

build/bin:
	mkdir -p build/bin

run-production: build/bin/RunProdServer build/Generated
	build/bin/RunProdServer

psql:
	@psql -h $$PWD/build/db -d app

Application/Schema.sql:
	touch $@

Application/Fixtures.sql:
	touch $@

initdb: db
db: Application/Schema.sql Application/Fixtures.sql
	echo "drop schema public cascade; create schema public;" | psql -h $$PWD/build/db -d app
	psql -h $$PWD/build/db -d app < Application/Schema.sql
	psql -h $$PWD/build/db -d app < Application/Fixtures.sql

dumpdb: dump_db
dump_db:
	pg_dump -a --inserts --disable-triggers -h $$PWD/build/db app | sed -e '/^--/d' > Application/Fixtures.sql

ghci:
	ghci -threaded -i. -iTurboHaskell -fexternal-interpreter

build/Generated: Application/Schema.hs TurboHaskell/TurboHaskell/SchemaCompiler.hs
	rm -rf build/Generated && mkdir -p build/Generated
	ghci -e ':script TurboHaskell/compileModels'

build/bin/RunUnoptimizedProdServer: Main.hs build/bin static/prod.js static/prod.css build/Generated
	mkdir -p build/RunUnoptimizedProdServer
	ghc -O0 ${GHC_OPTIONS} $< -o $@ -odir build/RunUnoptimizedProdServer -hidir build/RunUnoptimizedProdServer
	chmod +x $<
	rm -f build/bin/RunProdServer
	ln -s `basename $@` build/bin/RunProdServer

build/bin/RunOptimizedProdServer: Main.hs build/bin static/prod.js static/prod.css
	mkdir -p build/RunOptimizedProdServer
	ghc -O2 ${GHC_OPTIONS} ${PROD_GHC_OPTIONS} $< -o $@ -odir build/RunOptimizedProdServer -hidir build/RunOptimizedProdServer
	chmod +x $<
	rm -f build/bin/RunProdServer
	ln -s `basename $@` build/bin/RunProdServer

clean:
	rm -rf build/bin
	rm -rf TurboHaskell/TurboHaskell/static/node_modules
	rm -rf build/db
	rm -f .envrc

static/prod.js: $(JS_FILES)
	awk -v RS='\0' '{print "(function (window, document, undefined) \{"; print; print "\n\})(window, document);";}' $(JS_FILES) > $@

static/prod.css: $(CSS_FILES)
	cat $(CSS_FILES) > $@

print-ghc-options:
	@echo ${GHC_OPTIONS}

print-ghc-extensions:
	@echo ${GHC_EXTENSIONS}

build/db/state:
	mkdir -p build/db
	cd build/db && initdb state
	(postgres -D build/db/state -p 8001) & echo $$! > build/db/server.pid
	sleep 4
	createdb app -p 8001
	psql -p 8001 -d app < Application/Schema.sql
	psql -p 8001 -d app < Application/Fixtures.sql
	kill `cat build/db/server.pid`
	rm build/db/server.pid
