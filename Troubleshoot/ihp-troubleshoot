#!/usr/bin/env python3

from os import path, getcwd, readlink
from enum import Enum, unique
from platform import platform
from subprocess import run
from pathlib import Path


@unique
class Color(Enum):
    END = "\033[0m"
    RED = "\033[31m"
    BOLD = "\033[1m"
    GREEN = "\033[32m"


def show(color, message):
    return f"{color.value}{message}{Color.END.value}"


def show_step(message):
    print(show(Color.BOLD, f"{message}:"))


def show_success(message):
    print(show(Color.GREEN, f"+ {message}"))


def show_failure(message):
    print(show(Color.RED, f"- {message}"))


def path_exists(file_path, success_message, error_message):
    if file_path is not None and path.exists(file_path):
        show_success(success_message)
    else:
        show_failure(error_message)


def run_command(commands, maybe_input=None):
    input = maybe_input.encode('utf-8') if maybe_input is not None else None
    return run(commands, capture_output=True, input=input).stdout.decode('utf-8')


show_step("Checking that the current directory is an IHP project")

path_exists(
    "Main.hs",
    "Found Main.hs",
    "Main.hs missing. Is this an IHP project?"
)

path_exists(
    "start",
    "Found start script",
    "start script missing. Is this an IHP project?"
)

path_exists(
    "/nix",
    "Nix installed",
    "Nix store not found. Is nix installed?"
)

show_step("Checking direnv")

path_exists(
    ".envrc",
    "Found .envrc",
    ".envrc missing. Try 'make .envrc'"
)

direnv_output = run_command(["direnv", "status"])
envrc_path = path.join(getcwd(), ".envrc")

if f"Found RC path {envrc_path}" in direnv_output:
    show_success("direnv loads .envrc")
else:
    show_failure(
        "direnv didn't load the project .envrc. Did you set up direnv in your shell?"
    )

if "Found RC allowed true" in direnv_output:
    show_success("direnv allows .envrc")
else:
    show_failure("direnv denied .envrc, run `direnv allow` to allow .envrc")

ghci_path = run_command(["which", "ghci"])

if "/nix/store" in ghci_path:
    show_success("ghci is loaded from nix store")
else:
    show_failure(
        "ghci is not loaded from /nix/store/... Is direnv hooked into your shell?"
    )

show_step("Checking .ghci")

path_exists(
    ".ghci",
    "Found .ghci",
    ".ghci missing"
)

ghci_output = run_command(["ghci", "2>&1"], "putStrLn \"ok\"")

if ".ghci is writable by someone else" in ghci_output:
    show_failure(
        ".ghci permissions are wrong. Try 'chmod go-w .ghci' to fix this"
    )
else:
    show_success(".ghci permissions are ok")

show_step("Checking IHP")

ihp_lib_is_link = path.islink("build/ihp-lib")

if ihp_lib_is_link:
    show_success("Symlink build/ihp-lib exists")
else:
    show_failure(
        "Symlink build/ihp-lib is missing. Try 'make build/ihp-lib' to fix this"
    )

ihp_lib_link = readlink("build/ihp-lib") if ihp_lib_is_link else None

path_exists(
    ihp_lib_link,
    "Symlink build/ihp-lib target exists",
    "Symlink build/ihp-lib target directory does not exist. Try `nix-shell --run \"make -B build/ihp-lib\"` to fix this"
)

if path.exists("IHP"):
    show_success("Local IHP directory exists")
else:
    show_success("IHP used from nix")

show_step("Checking Cachix")

cachix_output = run_command(["cachix", "--help"])

if "https://cachix.org command line interface" in cachix_output:
    show_success("Cachix exists")
else:
    "Cachix is missing. Is cachix installed?"

with open(path.join(Path.home(), ".config/nix/nix.conf")) as file:
    nix_conf = file.read()

    if "digitallyinduced.cachix.org-1:y+wQvrnxQ+PdEsCt91rmvv39qRCYzEgGQaldK26hCKE=" in nix_conf:
        show_success("digitallyinduced.cachix.org configured")
    else:
        show_failure(
            "digitallyinduced.cachix.org binary cache missing. Try 'cachix use digitallyinduced'"
        )

    if "digitallyinduced.cachix.org-1:3mGU1b6u5obFp2VUfI55Xe8/+mawl7y9Eztu3rb94PI=" in nix_conf:
        show_failure(
            "Found legacy cachix public key for digitallyinduced.cachix.org. Try to remove digitallyinduced.cachix.org-1:3mGU1b6u5obFp2VUfI55Xe8/+mawl7y9Eztu3rb94PI= from ~/.config/nix/nix.conf"
        )
    else:
        show_success("No legacy cachix key found")

show_step("Debugging Details")

show_step("GHCI Output")
print(ghci_output)

show_step("build/ihp-lib Target")
print(ihp_lib_link)

show_step("Direnv Output")
print(direnv_output)

show_step("which direnv Output")
print(ghci_path)

show_step("default.nix")
with open("default.nix") as file:
    head = [next(file) for x in range(5)]
    print("".join(head))

show_step("OS")
print(platform())
